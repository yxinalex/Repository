================================================================================================================================================================
-		Vim Command02
================================================================================================================================================================

 Vim命令合集
命令历史

以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。
启动vim

在命令行窗口中输入以下命令即可

vim 直接启动vim

vim filename 打开vim并创建名为filename的文件
文件命令

打开单个文件

vim file

同时打开多个文件

vim file1 file2 file3 ...

在vim窗口中打开一个新文件

:open file

在新窗口中打开文件

:split file

切换到下一个文件

:bn

切换到上一个文件

:bp

查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。

:args

打开远程文件，比如ftp或者share folder

:e ftp://192.168.10.76/abc.txt
:e \\qadrive\test\1.txt
vim的模式

正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空
插入模式（按i键进入） 左下角显示--INSERT--
可视模式（不知道如何进入） 左下角显示--VISUAL--
导航命令

% 括号匹配
插入命令

i 在当前位置生前插入
I 在当前行首插入
a 在当前位置后插入
A 在当前行尾插入
o 在当前行之后插入一行
O 在当前行之前插入一行

查找命令
/text　　查找text，按n健查找下一个，按N健查找前一个。
?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。
vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$
:set ignorecase　　忽略大小写的查找
:set noignorecase　　不忽略大小写的查找
查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。
:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。
:set nohlsearch　　关闭高亮搜索显示

:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。

:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。

:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。
替换命令

ra 将当前字符替换为a，当期字符即光标所在字符。

s/old/new/ 用old替换new，替换当前行的第一个匹配

s/old/new/g 用old替换new，替换当前行的所有匹配

%s/old/new/ 用old替换new，替换所有行的第一个匹配

%s/old/new/g 用old替换new，替换整个文件的所有匹配

:10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。

ddp 交换光标所在行和其下紧邻的一行。
移动命令

h 左移一个字符
l 右移一个字符，这个命令很少用，一般用w代替。
k 上移一个字符
j 下移一个字符
以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！<Esc>，这里的Esc是必须的，否则命令不生效。

w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。

b 向后移动一个单词 2b 向后移动2个单词

e，同w，只不过是光标停在单词尾部

ge，同b，光标停在单词尾部。

^ 移动到本行第一个非空白字符上。

0（数字0）移动到本行第一个字符上，

<HOME> 移动到本行第一个字符。同0健。

$ 移动到行尾 3$ 移动到下面3行的行尾

gg 移动到文件头。 = [[

G（shift + g） 移动到文件尾。 = ]]

f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。

F 同f，反向查找。

跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。

Ctrl + e 向下滚动一行

Ctrl + y 向上滚动一行

Ctrl + d 向下滚动半屏

Ctrl + u 向上滚动半屏

Ctrl + f 向下滚动一屏

Ctrl + b 向上滚动一屏
撤销和重做

u 撤销（Undo）
U 撤销对整行的操作
Ctrl + r 重做（Redo），即撤销的撤销。
删除命令

x 删除当前字符

3x 删除当前光标开始向后三个字符

X 删除当前字符的前一个字符。X=dh

dl 删除当前字符， dl=x

dh 删除前一个字符

dd 删除当前行

dj 删除上一行

dk 删除下一行

10d 删除当前行开始的10行。

D 删除当前字符至行尾。D=d$

d$ 删除当前字符之后的所有字符（本行）

kdgg 删除当前行之前所有行（不包括当前行）

jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）

:1,10d 删除1-10行

:11,$d 删除11行及以后所有的行

:1,$d 删除所有行

J(shift + j)　　删除两行之间的空行，实际上是合并两行。
拷贝和粘贴

yy 拷贝当前行

nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。

p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。

shift+p 在当前行前粘贴

:1,10 co 20 将1-10行插入到第20行之后。

:1,$ co $ 将整个文件复制一份并添加到文件尾部。

正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制

ddp交换当前行和其下一行

xp交换当前字符和其后一个字符
剪切命令

正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切

ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴

:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。

:1, 10 m 20 将第1-10行移动到第20行之后。
退出命令

:wq 保存并退出

ZZ 保存并退出

:q! 强制退出并忽略所有更改

:e! 放弃所有修改，并打开原来文件。
窗口命令

:split或new 打开一个新窗口，光标停在顶层的窗口上

:split file或:new file 用新窗口打开文件

split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。

Ctrl+ww 移动到下一个窗口

Ctrl+wj 移动到下方的窗口

Ctrl+wk 移动到上方的窗口

关闭窗口

:close 最后一个窗口不能使用此命令，可以防止意外退出vim。

:q 如果是最后一个被关闭的窗口，那么将退出vim。

ZZ 保存并退出。

关闭所有窗口，只保留当前窗口

:only

录制宏

按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。
执行shell命令

:!command

:!ls 列出当前目录下文件

:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。

:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。

:suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。
注释命令

perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#

3,5 s/^/#/g 注释第3-5行

3,5 s/^#//g 解除3-5行的注释

1,$ s/^/#/g 注释整个文档。

:%s/^/#/g 注释整个文档，此法更快。
帮助命令

:help or F1 显示整个帮助
:help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。
:help 'number' Vim选项的帮助用单引号括起
:help <Esc> 特殊键的帮助用<>扩起
:help -t Vim启动参数的帮助用-
：help i_<Esc> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式
帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回
其他非编辑命令

. 重复前一次命令

:set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看

:scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。

:set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:>-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。

Vim教程
在Unix系统上
$ vimtutor
在Windows系统上
:help tutor

:syntax 列出已经定义的语法项
:syntax clear 清除已定义的语法规则
:syntax case match 大小写敏感，int和Int将视为不同的语法元素
:syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案


================================================================================================================================================================
-		Vim Command02
================================================================================================================================================================

1. 关于Vim

vim是我最喜欢的编辑器，也是linux下第二强大的编辑器。 虽然emacs是公认的世界第一，我认为使用emacs并没有使用vi进行编辑来得高效。 如果是初学vi，运行一下vimtutor是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的vimtutor，就运行vimtutor zh）
1.1 Vim的几种模式

    正常模式：可以使用快捷键命令，或按:输入命令行。
    插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。
    可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。
    替换模式：正常模式下，按R进入。

2. 启动Vim

    vim -c cmd file: 在打开文件前，先执行指定的命令；
    vim -r file: 恢复上次异常退出的文件；
    vim -R file: 以只读的方式打开文件，但可以强制保存；
    vim -M file: 以只读的方式打开文件，不可以强制保存；
    vim -y num file: 将编辑窗口的大小设为num行；
    vim + file: 从文件的末尾开始；
    vim +num file: 从第num行开始；
    vim +/string file: 打开file，并将光标停留在第一个找到的string上。
    vim --remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim --remote file在已有的gvim中打开文件。

3. 文档操作

    :e file --关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。
    :e! file --放弃对当前文件的修改，编辑新的文件。
    :e+file -- 开始新的文件，并从文件尾开始编辑。
    :e+n file -- 开始新的文件，并从第n行开始编辑。
    :enew --编译一个未命名的新文档。(CTRL-W n)
    :e -- 重新加载当前文档。
    :e! -- 重新加载当前文档，并丢弃已做的改动。
    :e#或ctrl+^ -- 回到刚才编辑的文件，很实用。
    :f或ctrl+g -- 显示文档名，是否修改，和光标位置。
    :f filename -- 改变编辑的文件名，这时再保存相当于另存为。
    gf -- 打开以光标所在字符串为文件名的文件。
    :w -- 保存修改。
    :n1,n2w filename -- 选择性保存从某n1行到另n2行的内容。
    :wq -- 保存并退出。
    ZZ -- 保存并退出。
    :x -- 保存并退出。
    :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)
    :saveas newfilename -- 另存为
    :browse e -- 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：
        :set browsedir=last -- 用上次访问过的目录（默认）；
        :set browsedir=buffer -- 用当前文件所在目录；
        :set browsedir=current -- 用当前工作目录；
    :Sex -- 水平分割一个窗口，浏览文件系统；
    :Vex -- 垂直分割一个窗口，浏览文件系统；

4. 光标的移动
4.1 基本移动

以下移动都是在normal模式下。

    h或退格: 左移一个字符；
    l或空格: 右移一个字符；
    j: 下移一行；
    k: 上移一行；
    gj: 移动到一段内的下一行；
    gk: 移动到一段内的上一行；
    +或Enter: 把光标移至下一行第一个非空白字符。
    -: 把光标移至上一行第一个非空白字符。
    w: 前移一个单词，光标停在下一个单词开头；
    W: 移动下一个单词开头，但忽略一些标点；
    e: 前移一个单词，光标停在下一个单词末尾；
    E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；
    b: 后移一个单词，光标停在上一个单词开头；
    B: 移动到上一个单词开头，忽略一些标点；
    ge: 后移一个单词，光标停在上一个单词末尾；
    gE: 同 ge ，不过‘单词’包含单词相邻的标点。
    (: 前移1句。
    ): 后移1句。
    {: 前移1段。
    }: 后移1段。
    fc: 把光标移到同一行的下一个c字符处
    Fc: 把光标移到同一行的上一个c字符处
    tc: 把光标移到同一行的下一个c字符前
    Tc: 把光标移到同一行的上一个c字符后
    ;: 配合f & t使用，重复一次
    ,: 配合f & t使用，反向重复一次

上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。

    0: 移动到行首。
    g0: 移到光标所在屏幕行行首。
    ^: 移动到本行第一个非空白字符。
    g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。
    $: 移动到行尾。
    g$: 移动光标所在屏幕行行尾。
    n|: 把光标移到递n列上。
    nG: 到文件第n行。
    :n<cr> 移动到第n行。
    :$<cr> 移动到最后一行。
    H: 把光标移到屏幕最顶端一行。
    M: 把光标移到屏幕中间一行。
    L: 把光标移到屏幕最底端一行。
    gg: 到文件头部。
    G: 到文件尾部。

4.2 翻屏

    ctrl+f: 下翻一屏。
    ctrl+b: 上翻一屏。
    ctrl+d: 下翻半屏。
    ctrl+u: 上翻半屏。
    ctrl+e: 向下滚动一行。
    ctrl+y: 向上滚动一行。
    n%: 到文件n%的位置。
    zz: 将当前行移动到屏幕中央。
    zt: 将当前行移动到屏幕顶端。
    zb: 将当前行移动到屏幕底端。

4.3 标记

使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。

    m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。
    m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
    `{a-z}: 移动到标记位置。
    '{a-z}: 移动到标记行的行首。
    `{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
    ``: 移动到上次编辑的位置。''也可以，不过``精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
    `": 移动到上次离开的地方。
    `.: 移动到最后改动的地方。
    :marks 显示所有标记。
    :delmarks a b -- 删除标记a和b。
    :delmarks a-c -- 删除标记a、b和c。
    :delmarks a c-f -- 删除标记a、c、d、e、f。
    :delmarks! -- 删除当前缓冲区的所有标记。
    :help mark-motions 查看更多关于mark的知识。

5. 插入文本
5.1 基本插入

    i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。
    I: 在当前行第一个非空字符前插入；
    gI: 在当前行第一列插入；
    a: 在光标后插入；
    A: 在当前行最后插入；
    o: 在下面新建一行插入；
    O: 在上面新建一行插入；
    :r filename在当前位置插入另一个文件的内容。
    :[n]r filename在第n行插入另一个文件的内容。
    :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。

5.2 改写插入

    c[n]w: 改写光标后1(n)个词。
    c[n]l: 改写光标后n个字母。
    c[n]h: 改写光标前n个字母。
    [n]cc: 修改当前[n]行。
    [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
    [n]S: 删除指定数目的行，并以所输入文本代替之。

注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。
6. 剪切复制和寄存器
6.1 剪切和复制、粘贴

    [n]x: 剪切光标右边n个字符，相当于d[n]l。
    [n]X: 剪切光标左边n个字符，相当于d[n]h。
    y: 复制在可视模式下选中的文本。
    yy or Y: 复制整行文本。
    y[n]w: 复制一(n)个词。
    y[n]l: 复制光标右边1(n)个字符。
    y[n]h: 复制光标左边1(n)个字符。
    y$: 从光标当前位置复制到行尾。
    y0: 从光标当前位置复制到行首。
    :m,ny<cr> 复制m行到n行的内容。
    y1G或ygg: 复制光标以上的所有行。
    yG: 复制光标以下的所有行。
    yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。
    d: 删除（剪切）在可视模式下选中的文本。
    d$ or D: 删除（剪切）当前位置到行尾的内容。
    d[n]w: 删除（剪切）1(n)个单词
    d[n]l: 删除（剪切）光标右边1(n)个字符。
    d[n]h: 删除（剪切）光标左边1(n)个字符。
    d0: 删除（剪切）当前位置到行首的内容
    [n] dd: 删除（剪切）1(n)行。
    :m,nd<cr> 剪切m行到n行的内容。
    d1G或dgg: 剪切光标以上的所有行。
    dG: 剪切光标以下的所有行。
    daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。
    d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。
    p: 在光标之后粘贴。
    P: 在光标之前粘贴。

6.2 文本对象

    aw：一个词
    as：一句。
    ap：一段。
    ab：一块（包含在圆括号中的）。

y, d, c, v都可以跟文本对象。
6.3 寄存器

    a-z：都可以用作寄存器名。"ayy把当前行的内容放入a寄存器。
    A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如"Ayy把当前行的内容追加到a寄存器中。
    :reg 显示所有寄存器的内容。
    ""：不加寄存器索引时，默认使用的寄存器。
    "*：当前选择缓冲区，"*yy把当前行的内容放入当前选择缓冲区。
    "+：系统剪贴板。"+yy把当前行的内容放入系统剪贴板。

7. 查找与替换
7.1 查找

    /something: 在后面的文本中查找something。
    ?something: 在前面的文本中查找something。
    /pattern/+number: 将光标停在包含pattern的行后面第number行上。
    /pattern/-number: 将光标停在包含pattern的行前面第number行上。
    n: 向后查找下一个。
    N: 向前查找下一个。

可以用grep或vimgrep查找一个模式都在哪些地方出现过，
其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。
用法为： :vim[grep]/pattern/[g] [j] files
g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。
j的含义是grep结束后，结果停在第j项，默认是停在第一项。
vimgrep前面可以加数字限定搜索结果的上限，如
:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。
 
其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。
比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：
:vim/^d{1,}./ %
然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，
就更像个目录了。
7.2 替换

    :s/old/new - 用new替换当前行第一个old。
    :s/old/new/g - 用new替换当前行所有的old。
    :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。
    :%s/old/new/g - 用new替换文件中所有的old。
    :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。
    :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。
    所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。

还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，
语法为 :[range]g/pattern/command
例如 :%g/^ xyz/normal dd。
表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。

关于range的规定为：

    如果不指定range，则表示当前行。
    m,n: 从m行到n行。
    0: 最开始一行（可能是这样）。
    $: 最后一行
    .: 当前行
    %: 所有行

7.3 正则表达式

高级的查找替换就要用到正则表达式。

    \d: 表示十进制数（我猜的）
    \s: 表示空格
    \S: 非空字符
    \a: 英文字母
    \|: 表示 或
    \.: 表示.
    {m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a\{m,n} 表示m 到n个英文字母。
    {m,}: 表示m到无限多个字符。
    **: 当前目录下的所有子目录。

:help pattern得到更多帮助。
8. 排版
8.1 基本排版

    << 向左缩进一个shiftwidth
    >> 向右缩进一个shiftwidth
    :ce(nter) 本行文字居中
    :le(ft) 本行文字靠左
    :ri(ght) 本行文字靠右
    gq 对选中的文字重排，即对过长的文字进行断行
    gqq 重排当前行
    gqnq 重排n行
    gqap 重排当前段
    gqnap 重排n段
    gqnj 重排当前行和下面n行
    gqQ 重排当前段对文章末尾
    J 拼接当前行和下一行
    gJ 同 J ，不过合并后不留空格。

8.2 拼写检查

    :set spell－开启拼写检查功能
    :set nospell－关闭拼写检查功能
    ]s－移到下一个拼写错误的单词
    [s－作用与上一命令类似，但它是从相反方向进行搜索
    z=－显示一个有关拼写错误单词的列表，可从中选择
    zg－告诉拼写检查器该单词是拼写正确的
    zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的

8.3 统计字数

g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。
9. 编辑多个文件
9.1 一次编辑多个文件

我们可以一次打开多个文件，如

    vi a.txt b.txt c.txt

    使用:next(:n)编辑下一个文件。
    :2n 编辑下2个文件。
    使用:previous或:N编辑上一个文件。
    使用:wnext，保存当前文件，并编辑下一个文件。
    使用:wprevious，保存当前文件，并编辑上一个文件。
    使用:args 显示文件列表。
    :n filenames或:args filenames 指定新的文件列表。
    vi -o filenames 在水平分割的多个窗口中编辑多个文件。
    vi -O filenames 在垂直分割的多个窗口中编辑多个文件。

9.2 多标签编辑

    vim -p files: 打开多个文件，每个文件占用一个标签页。
    :tabe, tabnew -- 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。
    ^w gf -- 在新的标签页里打开光标下路径指定的文件。
    :tabn -- 切换到下一个标签。Control + PageDown，也可以。
    :tabp -- 切换到上一个标签。Control + PageUp，也可以。
    [n] gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。
    :tab split -- 将当前缓冲区的内容在新页签中打开。
    :tabc[lose] -- 关闭当前的标签页。
    :tabo[nly] -- 关闭其它的标签页。
    :tabs -- 列出所有的标签页和它们包含的窗口。
    :tabm[ove] [N] -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。

9.3 缓冲区

    :buffers或:ls或:files 显示缓冲区列表。
    ctrl+^：在最近两个缓冲区间切换。
    :bn -- 下一个缓冲区。
    :bp -- 上一个缓冲区。
    :bl -- 最后一个缓冲区。
    :b[n]或:[n]b -- 切换到第n个缓冲区。
    :nbw(ipeout) -- 彻底删除第n个缓冲区。
    :nbd(elete) -- 删除第n个缓冲区，并未真正删除，还在unlisted列表中。
    :ba[ll] -- 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。

10. 分屏编辑

    vim -o file1 file2:水平分割窗口，同时打开file1和file2
    vim -O file1 file2:垂直分割窗口，同时打开file1和file2

10.1 水平分割

    :split(:sp) -- 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。
    :split filename -- 水平分割窗口，并在新窗口中显示另一个文件。
    :nsplit(:nsp) -- 水平分割出一个n行高的窗口。
    :[N]new -- 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)
    ctrl+w f --水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。
    C-w C-^ -- 水平分割一个窗口，打开刚才编辑的文件。

10.2 垂直分割

    :vsplit(:vsp) -- 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)
    :[N]vne[w] -- 垂直分割出一个新窗口。
    :vertical 水平分割的命令： 相应的垂直分割。

10.3 关闭子窗口

    :qall -- 关闭所有窗口，退出vim。
    :wall -- 保存所有修改过的窗口。
    :only -- 只保留当前窗口，关闭其它窗口。(CTRL-W o)
    :close -- 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )

10.4 调整窗口大小

    ctrl+w + --当前窗口增高一行。也可以用n增高n行。
    ctrl+w - --当前窗口减小一行。也可以用n减小n行。
    ctrl+w _ --当前窗口扩展到尽可能的大。也可以用n设定行数。
    :resize n -- 当前窗口n行高。
    ctrl+w = -- 所有窗口同样高度。
    n ctrl+w _ -- 当前窗口的高度设定为n行。
    ctrl+w < --当前窗口减少一列。也可以用n减少n列。
    ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。
    ctrl+w | --当前窗口尽可能的宽。也可以用n设定列数。

10.5 切换和移动窗口

如果支持鼠标，切换和调整子窗口的大小就简单了。

    ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。
    ctrl+w p: 切换到前一个窗口。
    ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。
    ctrl+w t(b):切换到最上（下）面的窗口。<BR>
    ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。
    ctrl+w r：旋转窗口的位置。
    ctrl+w T: 将当前的窗口移动到新的标签页上。

11. 快速编辑
11.1 改变大小写

    ~: 反转光标所在字符的大小写。
    可视模式下的U或u：把选中的文本变为大写或小写。
    gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。

11.2 替换（normal模式）

    r: 替换光标处的字符，同样支持汉字。
    R: 进入替换模式，按esc回到正常模式。

11.3 撤消与重做（normal模式）

    [n] u: 取消一(n)个改动。
    :undo 5 -- 撤销5个改变。
    :undolist -- 你的撤销历史。
    ctrl + r: 重做最后的改动。
    U: 取消当前行中所有的改动。
    :earlier 4m -- 回到4分钟前
    :later 55s -- 前进55秒

11.4 宏

    . --重复上一个编辑动作
    qa：开始录制宏a（键盘操作记录）
    q：停止录制
    @a：播放宏a

12. 编辑特殊文件
12.1 文件加解密

    vim -x file: 开始编辑一个加密的文件。
    :X -- 为当前文件设置密码。
    :set key= -- 去除文件的密码。

这里是 滇狐总结的比较高级的vi技巧。
12.2 文件的编码

    :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
    :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
    :set fenc或:set fileencoding，查看当前文件的编码。
    在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。

让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置
12.3 文件格式

大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。

    :e ++ff=dos filename, 让vim用dos格式打开这个文件。
    :w ++ff=mac filename, 以mac格式存储这个文件。
    :set ff，显示当前文件的格式。
    在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。

13. 编程辅助
13.1 一些按键

    gd: 跳转到局部变量的定义处；
    gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；
    g;: 上一个修改过的地方；
    g,: 下一个修改过的地方；
    [[: 跳转到上一个函数块开始，需要有单独一行的{。
    ]]: 跳转到下一个函数块开始，需要有单独一行的{。
    []: 跳转到上一个函数块结束，需要有单独一行的}。
    ][: 跳转到下一个函数块结束，需要有单独一行的}。
    [{: 跳转到当前块开始处；
    ]}: 跳转到当前块结束处；
    [/: 跳转到当前注释块开始处；
    ]/: 跳转到当前注释块结束处；
    %: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。

下面的括号匹配对编程很实用的。

    ci', di', yi'：修改、剪切或复制'之间的内容。
    ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
    ci", di", yi"：修改、剪切或复制"之间的内容。
    ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
    ci(, di(, yi(：修改、剪切或复制()之间的内容。
    ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
    ci[, di[, yi[：修改、剪切或复制[]之间的内容。
    ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
    ci{, di{, yi{：修改、剪切或复制{}之间的内容。
    ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
    ci<, di<, yi<：修改、剪切或复制<>之间的内容。
    ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>。

13.2 ctags

    -> class names(类名)   
    -> macro definitions(宏定义)   
    -> enumeration names(枚举名)   
    -> enumerators(枚举变量)   
    -> function definitions(函数定义)  
    -> function prototypes/declarations(函数定义/声明)   
    -> class, interface, struct, and union data members(类,接口,结构体,联合体)  
    -> structure names(结构体名)  
    -> typedefs(别名)  
    -> union names(联合体名)  
    -> variables (definitions and external declarations)变量  
    
    
    ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags
    :set tags=path/tags -- 告诉ctags使用哪个tag文件
    :tag xyz -- 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t
    :stag xyz -- 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口
    :ptag xyz -- 在预览窗口中打开xyz的定义，热键是C-w }。
    :pclose -- 关闭预览窗口。热键是C-w z。
    :pedit abc.h -- 在预览窗口中编辑abc.h
    :psearch abc -- 搜索当前文件和当前文件include的文件，显示包含abc的行。

有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。

    :[n]tnext -- 下一[n]个匹配。
    :[n]tprev -- 上一[n]个匹配。
    :tfirst -- 第一个匹配
    :tlast -- 最后一个匹配
    :tselect tagname -- 打开选择列表

tab键补齐

    :tag xyz<tab> -- 补齐以xyz开头的tag名，继续按tab键，会显示其他的。
    :tag /xyz<tab> -- 会用名字中含有xyz的tag名补全。

13.3 cscope

    cscope -Rbq: 生成cscope.out文件
    :cs add /path/to/cscope.out /your/work/dir
    :cs find c func -- 查找func在哪些地方被调用
    :cw -- 打开quickfix窗口查看结果

13.4 gtags

Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。

    :Gtags funcname 定位到 funcname 的定义处。
    :Gtags -r funcname 查询 funcname被引用的地方。
    :Gtags -s symbol 定位 symbol 出现的地方。
    :Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。
    :Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。
    :Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。

13.5 编译

vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。

如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：

set makeprg=javac\ abc.java

然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：

:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#

%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。
13.6 快速修改窗口

其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)

    :copen -- 打开快速修改窗口。
    :cclose -- 关闭快速修改窗口。

快速修改窗口在make程序时非常有用，当make之后：

    :cl -- 在快速修改窗口中列出错误。
    :cn -- 定位到下一个错误。
    :cp -- 定位到上一个错误。
    :cr -- 定位到第一个错误。

13.7 自动补全

    C-x C-s -- 拼写建议。
    C-x C-v -- 补全vim选项和命令。
    C-x C-l -- 整行补全。
    C-x C-f -- 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。
    C-x C-p 和C-x C-n -- 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。
    C-x C-o -- 编程时可以补全关键字和函数名啊。
    C-x C-i -- 根据头文件内关键字补全。
    C-x C-d -- 补全宏定义。
    C-x C-n -- 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。

当弹出补全菜单后：

    C-p 向前切换成员；
    C-n 向后切换成员；
    C-e 退出下拉菜单，并退回到原来录入的文字；
    C-y 退出下拉菜单，并接受当前选项。

13.8 多行缩进缩出

    正常模式下，按两下>;光标所在行会缩进。
    如果先按了n，再按两下>;，光标以下的n行会缩进。
    对应的，按两下<;，光标所在行会缩出。
    如果在编辑代码文件，可以用=进行调整。
    在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
    或者n =，调整n行代码的缩排。

13.9 折叠

    zf -- 创建折叠的命令，可以在一个可视区域上使用该命令；
    zd -- 删除当前行的折叠；
    zD -- 删除当前行的折叠；
    zfap -- 折叠光标所在的段；
    zo -- 打开折叠的文本；
    zc -- 收起折叠；
    za -- 打开/关闭当前折叠；
    zr -- 打开嵌套的折行；
    zm -- 收起嵌套的折行；
    zR (zO) -- 打开所有折行；
    zM (zC) -- 收起所有折行；
    zj -- 跳到下一个折叠处；
    zk -- 跳到上一个折叠处；
    zi -- enable/disable fold;

14. 命令行

normal模式下按:进入命令行模式
14.1 命令行模式下的快捷键：

    上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。
    左右方向键：左/右移一个字符。
    C-w： 向前删除一个单词。
    C-h： 向前删除一个字符，等同于Backspace。
    C-u： 从当前位置移动到命令行开头。
    C-b： 移动到命令行开头。
    C-e： 移动到命令行末尾。
    Shift-Left： 左移一个单词。
    Shift-Right： 右移一个单词。
    @： 重复上一次的冒号命令。
    q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。
    q/和q? 可以打开查找历史记录。

14.2 执行外部命令

    :! cmd 执行外部命令。
    :!! 执行上一次的外部命令。
    :sh 调用shell，用exit返回vim。
    :r !cmd 将命令的返回结果插入文件当前位置。
    :m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。

15. 其它
15.1 工作目录

    :pwd 显示vim的工作目录。
    :cd path 改变vim的工作目录。
    :set autochdir 可以让vim 根据编辑的文件自动切换工作目录。

15.2 一些快捷键（收集中）

    K: 打开光标所在词的manpage。
    *: 向下搜索光标所在词。
    g*: 同上，但部分符合即可。
    #: 向上搜索光标所在词。
    g#: 同上，但部分符合即可。
    g C-g: 统计全文或统计部分的字数。

15.3 在线帮助

    :h(elp)或F1 打开总的帮助。
    :help user-manual 打开用户手册。
    命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。
    :helptags somepath 为somepath中的文档生成索引。
    :helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。
    Ctrl+] 跳转到tag主题，Ctrl+t 跳回。
    :ver 显示版本信息。

15.4 一些小功能

    简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。


















































Vim命令合集
96 im蚂蚁
2016.03.08 11:12* 字数 7644 阅读 4388评论 2喜欢 15
命令历史

以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。
启动vim

在命令行窗口中输入以下命令即可

    vim 直接启动vim
    vim filename 打开vim并创建名为filename的文件

文件命令

    打开单个文件vim file
    同时打开多个文件vim file1 file2 file3 ...
    在vim窗口中打开一个新文件:open file
    在新窗口中打开文件:split file
    切换到下一个文件:bn
    切换到上一个文件:bp
    查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。:args
    打开远程文件，比如ftp或者share folder:e ftp://192.168.10.76/abc.txt或者:e \\qadrive\test\1.txt

vim的模式

    正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空
    插入模式（按i键进入） 左下角显示--INSERT--
    可视模式（不） 左下角显示--VISUAL--
    导航命令

移动命令

    ^:移动光标到行首；
    $:移动光标到行尾；
    ctrl-b:类似于键盘上的"PgUp"(b为backword)
    ctrl-f：类似于键盘上的"PgDn"(f为forword)
    G：移动到末行；
    1G：移动到首行；
    50G：移动到50行；
    H：移动到当前窗口的首行；
    M：移动到当前窗口的中间位置；
    L：移动光标到当前窗口的最后一行；
    w:光标移动到下一个单词的词首；注：对于中文，连续的多个汉字作为一个word。
    2w:重复执行w操作2次；
    e:光标移动到下一个单词的词尾；
    5e:重复执行e操作5次；
    b：向前移动光标，移动到前一个单词的词首；

句字(sentences)直接移动操作：

    ):光标移动到下一句；
    (:光标移动到上一句；
    3):光标移动到向下3句

段落（paragraphs）直接移动操作：

    {:向上移动一个段落；
    }:向下移动一个段落
    3}:向下移动3个段落

更多操作在vim Normal模式下输入 :help cursor-motions
vim

http://blog.csdn.net/richerg85/article/details/17636827
vim 快速选中并复制粘贴替换一个单词

    光标移动到aaa的开头，按 v 按e 按y
    光标移动到bbb的开头，按 v 按e 按p
    也就说，快速选中一个单词，按v按e即可。

    复制一个单词: yaw
    复制一行: yim 光标在中间

插入命令

    i 在当前位置生前插入
    I 在当前行首插入
    a 在当前位置后插入
    A 在当前行尾插入
    o 在当前行之后插入一行
    O 在当前行之前插入一行

查找命令

    /text　　查找text，按n健查找下一个，按N健查找前一个。
    ?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。
    vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$
    :set ignorecase　　忽略大小写的查找
    :set noignorecase　　不忽略大小写的查找
    查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。
    :set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。
    :set nohlsearch　　关闭高亮搜索显示
    :nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。
    :set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。
    :set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。

替换命令

    ra 将当前字符替换为a，当期字符即光标所在字符。
    s/old/new/ 用old替换new，替换当前行的第一个匹配
    s/old/new/g 用old替换new，替换当前行的所有匹配
    %s/old/new/ 用old替换new，替换所有行的第一个匹配
    %s/old/new/g 用old替换new，替换整个文件的所有匹配
    :10,20 s/^/ /g 在第10行知第20行每行前面加四个空格，用于缩进。
    ddp 交换光标所在行和其下紧邻的一行。

移动命令

    h 左移一个字符
    l 右移一个字符，这个命令很少用，一般用w代替。
    k 上移一个字符
    j 下移一个字符
    以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！<Esc>，这里的Esc是必须的，否则命令不生效。
    w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。
    b 向后移动一个单词 2b 向后移动2个单词
    e，同w，只不过是光标停在单词尾部
    ge，同b，光标停在单词尾部。
    ^ 移动到本行第一个非空白字符上。
    0（数字0）移动到本行第一个字符上，
    <HOME> 移动到本行第一个字符。同0健。
    $ 移动到行尾 3$ 移动到下面3行的行尾
    gg 移动到文件头。 = [[
    G（shift + g） 移动到文件尾。 = ]]
    f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。
    F 同f，反向查找。
    跳到指定行，:n，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。
    Ctrl + e 向下滚动一行
    Ctrl + y 向上滚动一行
    Ctrl + d 向下滚动半屏
    Ctrl + u 向上滚动半屏
    Ctrl + f 向下滚动一屏
    Ctrl + b 向上滚动一屏

撤销和重做

    u 撤销（Undo）
    U 撤销对整行的操作
    Ctrl + r 重做（Redo），即撤销的撤销。

删除命令

    x 删除当前字符
    3x 删除当前光标开始向后三个字符
    X 删除当前字符的前一个字符。X=dh
    dl 删除当前字符， dl=x
    dh 删除前一个字符
    dd 删除当前行
    dj 删除上一行
    dk 删除下一行
    10d 删除当前行开始的10行。
    D 删除当前字符至行尾。D=d$
    d$ 删除当前字符之后的所有字符（本行）
    kdgg 删除当前行之前所有行（不包括当前行）
    jdG（jd shift + g） 删除当前行之后所有行（不包括当前行）
    :1,10d 删除1-10行
    :11,$d 删除11行及以后所有的行
    :1,$d 删除所有行
    J(shift + j)　　删除两行之间的空行，实际上是合并两行。

拷贝和粘贴

    yy 拷贝当前行
    nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。
    p 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。
    shift+p 在当前行前粘贴
    :1,10 co 20 将1-10行插入到第20行之后。
    :1,$ co $ 将整个文件复制一份并添加到文件尾部。
    正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制
    ddp交换当前行和其下一行
    xp交换当前字符和其后一个字符

剪切命令

    正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切
    ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴
    :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。
    :1, 10 m 20 将第1-10行移动到第20行之后。

退出命令

    :wq 保存并退出
    ZZ 保存并退出
    :q! 强制退出并忽略所有更改
    :e! 放弃所有修改，并打开原来文件。

窗口命令

    :split或:new 打开一个新窗口，光标停在顶层的窗口上
    :split file或:new file 用新窗口打开文件
    split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。
    Ctrl+ww 移动到下一个窗口
    Ctrl+wj 移动到下方的窗口
    Ctrl+wk 移动到上方的窗口

关闭窗口

    :close 最后一个窗口不能使用此命令，可以防止意外退出vim。
    :q 如果是最后一个被关闭的窗口，那么将退出vim。
    ZZ 保存并退出。
    关闭所有窗口，只保留当前窗口:only

录制宏

    按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。

执行shell命令

    :!command
    :!ls 列出当前目录下文件
    :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。
    :!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。
    :suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。

注释命令

perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#

    3,5 s/^/#/g 注释第3-5行
    3,5 s/^#//g 解除3-5行的注释
    1,$ s/^/#/g 注释整个文档。
    :%s/^/#/g 注释整个文档，此法更快。

帮助命令

    :help or F1 显示整个帮助
    :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。
    :help 'number' Vim选项的帮助用单引号括起
    :help <Esc> 特殊键的帮助用<>扩起
    :help -t Vim启动参数的帮助用-
    ：help i_<Esc> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式
    帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回
    其他非编辑命令

来自：http://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html
IdeaVim插件使用技巧

在 IDEA Intellij小技巧和插件 一文中简单介绍了一下IdeaVim插件。在这里详细总结一下这个插件在日常编程中的一些常用小技巧。供有兴趣使用这个插件，但对Vim还不十分熟悉的朋 友参考。当然基本的hjkl移动光标和几种常见模式等等基本概念就略过不提了。

为了确保只包含常用操作，这里提到的技巧都没有从现成文档里抄，而是凭记忆列出（不常用自然就不记得了）。估计会有所遗漏，慢慢再补充。
1. 切换Vim模拟器状态

这个插件允许设置一个快捷键一键开启或关闭，在切换模式时会同时自动切换keymap，十分方便。默认键位是Ctrl+Alt+V，但这个键位覆盖了很常用的“抽取局部变量”功能，建议重设，在setting->keymap中查找VIM Emulator即可。

由 于开启和关闭状态分别使用两套keymap，因此两套都需要设定。可以把两套keymap下的都设为一样的键，也就是用同一个键切换。但个人建议设为不同 的键，这样能清楚知道当前处于那种模式中。并且，如果在开启Vim的插入模式下关闭Vim模拟器，下次进入时仍然是插入模式，比较混乱（因为你关闭模拟器 就是为了使用默认keymap输入大段代码，重新开启Vim模拟器就是为了使用普通模式下的命令）。因此建议把Vim keymap中的Exit Insert Mode设为与另一个keymap的Vim Emulator相同的键（也就是进入Vim模拟器的快捷键）。例如，我使用的设定是：

    Default keymap -> Vim Emulator : Ctrl+; (用Ctrl+分号开启Vim模拟器）
    Vim keymap -> Vim Emulator : Ctrl+, (用Ctrl+逗号关闭Vim模拟器）
    Vim keymap -> Vim Emulator : Ctrl+; (用Ctrl+分号退出插入模式，进入普通模式）

这样，在任何时候只要连按两下ctrl+分号，就能保证必定在Vim模拟器的普通模式中。
2. ScrollOff 参数

启 动Intellij后在Vim模拟器下输入命令 :set so=5 可以令屏幕滚动时在光标上下方保留5行预览代码（也就是光标会在第5行触发向上滚动，或者在倒数第5行触发向下滚动）。在代码窗口比较狭小时（例如单步跟 踪调试时）非常方便。可惜仅在Vim模拟器开启时有效。
3. 行号定位

普 通模式下输入 行号G 或 :行号<回车> 都能快速定位到某一行。区别在于前者在输入行号时屏幕上没有任何提示，后者则在Vim命令输入框中可以看到输入过程。（题外话：Sublime Text 2也是用 :行号 来快速定位到某行，应该是沿用了Vim的习惯）
4. 进入修改

进入插入模式的方式有很多，直接选用合适的方式进入插入模式比进入后再用箭头键移动光标要好。常用的有：

    o - 在当前行下方插入新行并自动缩进
    O - 在当前行上方插入新行并自动缩进 （普通模式下的大写字母命令用 shift+字母键 输入，下同）
    i - 在当前字符左方开始插入字符
    a - 在当前字符右方开始插入字符
    I - 光标移动到行首并进入插入模式
    A - 光标移动到行尾并进入插入模式
    s - 删除光标所在字符并进入插入模式
    S - 删除光标所在行并进入插入模式
    c< 范围> - 删除光标所在位置周围某个范围的文本并进入插入模式。关于范围请看第5点，常用的组合有：caw - 删除一个单词包括它后面的空格并开始插入； ciw - 删除一个单词并开始插入； ci" - 删除一个字符串内部文本并开始插入； c$ - 从光标位置删除到行尾并开始插入； ct字符 - 从光标位置删除本行某个字符之前（保留该字符）并开始插入。等等。
    C - 删除光标位置到行尾的内容并进入插入模式 (相当于c$)
    r - 修改光标所在字符，然后返回普通模式
    R - 进入覆盖模式

5. 范围操作

某些普通模式的动作命令后面可以追加一些表示范围的指令，表示该动作将作用在整个范围上。这类命令常用的有：

    d<范围> - 删除一定范围内的文本
    c<范围> - 删除一定范围内的文本并进入插入模式
    y<范围> - 将范围内的文本放入0号和"号注册栏
    v<范围> - 选择范围内的文本
    =<范围> - 自动缩进范围内的文本
    gU<范围> - 将范围内的字符转换为大写
    gu<范围> - 将范围内的字符转换为小写

        <范围> - 将范围中的内容缩进一格

    <<范围> - 将范围中的内容取消缩进一格

常用的范围指令有：

    空格 - 光标所在位置字符。（例如 gU空格 - 将光标位置字符转为大写）
    重复某些动作命令 - 光标所在行。 （例如dd删除一行，yy复制一行，cc删除一行文本并开始插入，>> 当前行缩进一格，==自动缩进当前行）
    $ - 从光标位置到行尾
    ^ - 从光标位置到行首，不包含缩进空白
    0 - 从光标位置到行首，包含缩进空白
    gg - 从光标位置到文件开头
    G - 从光标位置到文件结尾
    % - 从光标位置到另一边匹配的括号
    f<字符> - 从光标位置到光标右边某个字符首次出现的位置，包括该字符
    F<字符> - 从光标位置到光标左边某个字符首次出现的位置，包括该字符
    t<字符> - 从光标位置到光标右边某个字符首次出现的位置，包括该字符
    F<字符> - 从光标位置到光标左边某个字符首次出现的位置，包括该字符
    /正则表达式 - 从光标位置到下一个匹配正则表达式的位置（跨行）
    ?正则表达式 - 从光标位置到上一个匹配正则表达式的位置（跨行）
    aw - 一个单词加一个空格 （a可理解为“一个”，下同）
    iw - 一个单词 （i可理解为in，下同）
    a" - 一个字符串包括双引号
    i" - 一个字符串内部文本
    a< - 一组< >包含的文本，包括< >号本身
    同理类推： i<, a[, i[, a(, i(

注意：真正vim中的it范围（一对xml标签内部）在ideaVim中不生效。

用/或?命令查找时，正则表达式默认大小写敏感，如果需要不敏感，可以在正则表达式开始处加上\c标志。例如 /\cabc 可以匹配到 ABC。下面提到的:s命令同样适用。
6. 选择文本

在Vim中，选择文本需要进入“可视模式”（Visual Mode），这个名称比较奇怪，它的来由据说是因为在Vim的前身Vi中，选择区域是不可见的。在Vim中选择区域会高亮显示，因此称为“可视模式”。

    v - 进入字符选择模式， V - 进入行选择模式， Ctrl+v - 进入块选择模式。
    进入相应模式后移动光标即可选中文本。过程中可按o键令光标在选区两端切换。
    在块选择模式中选中多行，然后按I或A后输入文本，再退出插入模式，所输入的文本将自动加入到每一行的开头或结尾。

7. 复制粘贴

在 Vim模式下，复制粘贴并不直接使用系统的剪贴板，而是使用Vim提供的多个“寄存器”，每个寄存器都以一个字符来表示。关于寄存器的详细说明可以看这里 http://blah.blogsome.com/2006/04/27/vim_tut_register/ （随便google的一个网页），这里简单列一些常用的操作技巧 （注意，vim使用双引号"来作为选择寄存器的命令，因此下文中的双引号均指在普通模式下按双引号键）：

a）用y命令将文本存入寄存器后，如果想在别处替换原有内容，可以先用v命令选中原有内容，然后用p命令粘贴。但第一次粘贴后，默认的寄存器 "将被替换为刚刚删除的内容。如果要再次粘贴之前复制的内容，需要使用 "0p 命令组合来复制。也可以进入插入模式后用 Ctrl+r 0 来复制，例如 ciw<Ctrl+r>0 命令组合将用粘贴内容替换光标处的一个单词，并停留在插入模式。

b）在Windows下，寄存器 + 和 * 都代表系统剪贴板，可以互换使用，选一个顺手的即可。例如 "+yy 命令组合可将当前行复制到系统剪贴板。 ci"<Ctrl+r>* 命令组合则将系统剪贴板的内容替换字符串的内部文本。

c) 寄存器1至9记录之前九次的删除大段文本，每次超过一行的删除操作都会导致这9个寄存器的内容发生位移，最近删除的文本会存入寄存器1。但只有删除超过1 行时才会影响寄存器1至9，行内的删除内容则会被存入寄存器-（减号）。如果用q命令录制宏时不涉及跨行删除，可以在宏中直接使用这9个寄存器来暂存文 本。（在Vim中，复制内容与录制宏共享同一套寄存器，因此我习惯把字母寄存器留给宏使用）

d) 普通模式下小写p把寄存器内容复制到当前位置之后，大写P把寄存器内容复制到当前位置之前。

e) 使用 :regs 命令可以列出当前所有寄存器的内容
8. 一些插入模式下的常用快捷键

    Ctrl+h - 删除光标左边字符
    Ctrl+w - 删除光标左边的单词
    Ctrl+y - 复制上方的一个字符
    Ctrl+e - 复制下方的一个字符
    Ctrl+r 0 - 插入前一次用y命令寄存的内容
    Ctrl+r * - 插入系统剪贴板的内容
    Ctrl+r <寄存器名称> - 插入指定寄存器的内容
    Ctrl+a - 插入前一次插入模式所键入的内容
    Ctrl+o - 执行一个普通模式下的命令然后返回插入模式。 例如 Ctrl+o A 相当于按 End键， Ctrl+o I相当于按Home键

9. 退出插入模式

退出插入模式可以用 ESC 键，但键位太远。其实也可以用 Ctrl+[ 键退出插入模式 。当然也可以用第1点自定义的Ctrl+;快捷键，但这不是标准vim按键，会养成不良习惯，不建议使用。
10. 重复操作

普通模式下按. （小数点）可重复上一次的修改操作

    & - 重复上一次的:s替换命令
    @@ - 重复上一次执行的宏

11. 跳转

    Ctrl+] 跳转到当前标识符的定义位置 （相当于在当前光标位置的单词上按住ctrl用鼠标点击）
    Ctrl+o 回退一步 (go back)
    Ctrl+i 前进一步 (go forward)
    `. 跳转到之前修改位置
    `` 在前一次跳转位置与当前位置间切换
    行号G 或 :行号<回车> 跳转到某一行
    gg 跳转到文件开头
    G 跳转到文件末尾
    H 跳转到屏幕顶端（如果设置了set so=n，则跳转到第n行）
    L 跳转到屏幕底端（如果设置了set so=n，则跳转到倒数第n行）
    M 跳转到屏幕中间
    f 或 F 跳转到本行某个字符，小写f向右查找，大写F向左查找。用;或,在匹配间切换
    t 或 T 跳转到本行某个字符之前，小写t向右查找，大写T向左查找。用;或,在匹配间切换
    /正则表达式 跳转到下一个匹配。用n或N在匹配间切换。
    ?正则表达式 跳转到上一个匹配。用n或N在匹配间切换。
    （结合前面第5点，你也许注意到了，在指定范围时，使用跳转命令将指定一个从光标位置到跳转目标的区域）

12 书签

在 普通模式下按 m<小写字母> 即可定义书签，按 `<字母> 则可跳转到某个书签的精确位置，按 '<字母>可跳转到某个书签所在行的行首（用来录制宏时比较有用）。最常用的自然是mm, mn, mj, mk, ml这几个顺手的键位。
真正的vim中的全局书签 m<大写字母> 在目前IdeaVim版本中不生效。需要定义全局书签可以使用Idea原本的 F11 + 数字 方式
13 文本替换

    使用 :s/正则表达式/替换文本/ 可在本行内替换首次出现的匹配
    使用 :s/正则表达式/替换文本/g 在本行内替换所有出现的匹配
    使用 :%s/正则表达式/替换文本/g 在当前文件内替换所有出现的匹配

在 可视模式下选中文本后，使用:'<,'>s/正则表达式/替换文本/g 命令可在选中区域中替换文本。其中'<,'>部分在可视模式下，按:冒号后自动加入，直接输入s命令即可。但有效区域只能以行为单位。真正 Vim中的 %V 标志在IdeaVim中不生效。

    11 代码折叠
    zo - 打开折叠
    zc - 关闭折叠

14 宏定义

在 IdeaVim中定义宏比Idea自带的宏功能要轻量许多。按在普通模式下 q<寄存器名称> 即可开始把后续按键序列录制到指定寄存器中（寄存器参考前面第7条）。录制完毕进入普通模式再按q键即可停止录制。之后用 @<寄存器名称> 即可重放。需要注意的是宏和复制粘贴共用一套寄存器，因此在录制宏时就注意不要把当前宏正在使用的寄存器用来复制了。寄存器内容是自动保存的，重启 Idea仍然生效。但IdeaVim没有导出宏独立保存的功能。因此最好把用来保存宏的寄存器和用来复制粘贴的寄存器分开，不要同一个寄存器有时用来记录 宏，有时用来复制粘贴。我的习惯是键盘左手区用来保存一些长期使用的宏（比如说我有一个宏专门用来把pom.xml中的版本号抽取到property区 域，原来的位置则改用${property}引用）。右手区的hjklnm键用来保存一些临时宏。yuiop五个寄存器保留用来复制粘贴。如果录制的宏不 涉及删除大段代码，寄存器1至9也可以用来进行复制粘贴。

执行一次宏后，可以用@@命令重复上一次执行的宏。

在Idea 中录制宏时，如果触发了代码自动完成，在自动完成列表启动的状态输入的字符不会被记录。因此最好在Setting -> Code Completion -> Autopopup code completion中把延迟设为500ms以上或干脆关掉。在录制宏的过程中避免触发代码自动完成功能。

录制一些长期有效的宏时，开始录制后，最好先用0，^，T, F, $等命令把光标对齐到行首行末或某个特定起始位置（比如说用 F" 跳转到字符串的左边引号），再用一个f或/指令跳转到操作位置，这样的宏就不用必须把光标放在某个特定字符才能使用了。
15. 一些常用组合技

    全选： ggvG
    调换两个字符位置： xp
    复制一行： yyp
    调换两行位置： ddp
    插入模式下到行尾继续输入（相当于End键）： Ctrl+o A 或 Ctrl+[ A
    插入模式下到行首继续输入（相当于Home键）： Ctrl+o I 或 Ctrl+[ I
    到类定义位置（适用于正确缩进的public，protected类） ： ?^p回车

16. 一些在目前版本已知没有实现的一些常用Vim功能

（如果对Vim不熟悉可以跳过这节）

    a）let命令 （没有let命令就无法导出/导入寄存器内容，也就是无法导入宏）
    b）:g命令 （在文本处理中很有用的一个命令，在编程中倒是不那么常用）
    c）!命令 （执行shell命令）
    d）大部分正则表达式标记 （例如 %V， \v 等等）
    e) 某些多键命令双击最后一个字符表示作用于当前行。例如在Vim中gUU可以把当前行转换为大写，在IdeaVim中无效，实现同样功能可以先用V命令选中当前行，再用gU转换为大写。
    f）关于窗口操作的大部分命令 （Ctrl+w系列命令, :split等）
    g）所有Vim脚本插件 （不过大部分可以用Idea自身的功能和插件来补偿）

嗯，差点忘了，在普通模式下按u撤销上一个修改（相当于其他IDE的Ctrl+z），按Ctrl+r重做被撤销的修改。

http://my.oschina.net/pureboys/blog/182211](http://my.oschina.net/pureboys/blog/182211








































































Linux VIM .vimrc个性化定制
原创 2016年08月16日 17:07:55

    标签：
    vim /
    .vimrc



" ================ VIM Setting ================ "
set autowrite       " 自动保存
set autoindent      " 自动缩进  
set background=dark
" set backspace = 2     " 设置退格键可用
set completeopt=preview,menu        " 代码补全
set clipboard+=unnamed      " 共享剪贴板    
set cursorline      " 突出显示当前行
set cursorcolumn    " 突出显示当前列
set confirm         " 在处理未保存或只读文件的时候，弹出确认 
set cmdheight=2     " 总是显示状态行  
set cindent         " 使用C/C++语言的自动缩进方式
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式
set expandtab       " 不要用空格代替制表符
set foldenable      " 允许折叠    
set fillchars=vert:\ ,stl:\ ,stlnc:\        "在被分割的窗口间显示空白，便于阅读
set history=1024    " 历史记录数  
set hlsearch        " 搜索逐字符高亮  
set incsearch  
set iskeyword+=_,$,@,%,#,-          " 带有如下符号的单词不被换行分割
set ignorecase      " 搜索忽略大小写
set linebreak       " 整词换行
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2) 
set matchtime=1     " 匹配括号高亮的时间（单位是十分之一秒）  
set mouse=a         " 使用鼠标
set number          " 显示行号 
set nocompatible    " 去一致性  
" set previewwindow     " 标识预览窗口
set ruler           " 显示标尺    
set showcmd         " 输入的命令显示出来  
set scrolloff=3     " 光标移动到buffer的顶部和底部时保持3行距离 
set softtabstop=2   " 统一缩进为4  
set shiftwidth=4  
set smarttab        " 在行和段开始处使用制表符  
set showmatch       " 高亮显示匹配的括号  
set showcmd 
set showmode
set tabstop=2       " Tab键的宽度  
set whichwrap=b,s,<,>,[,]         "光标从行首和行末时可以跳到另一行去
filetype plugin indent on
 
" ================ ctags setting ================ "
" 按下F4重新生成tag文件，并更新taglist
map <F4> :!ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --languages=c,c++ --links=yes --c-kinds=+c+d+e+f+g+l+m+n+p+s+t+u+v+x --c++-kinds=+c+d+e+f+g+l+m+n+p+s+t+u+v+x --fields=+iaS --extra=+q -R .<CR><CR> :TlistUpdate<CR>
imap <F4> <ESC>:!ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --languages=c,c++ --links=yes --c-kinds=+c+d+e+f+g+l+m+n+p+s+t+u+v+x --c++-kinds=+c+d+e+f+g+l+m+n+p+s+t+u+v+x --fields=+iaS --extra=+q -R .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags
set tags+=~/.vim/tags/include_tags
set tags+=~/.vim/tags/local_tags
set tags+=~/.vim/tags/linux_tags
set tags+=~/.vim/tags/stl_tags
" set tags+=~/.vim/tags/boost_tags
"
set tags+=~/.vim/tags/airnas_tags


" ================ Omnicppcomplete Setting ================ "
" 按下F3自动补全代码，注意该映射语句后不能有其他字符，包括Tab，否则会自动补全一些乱码
imap <F3> <C-X><C-O>
" 按F2根据头文件内关键字补全
imap <F2> <C-X><C-I>
set completeopt=menu,menuone        " 关掉智能补全时的预览窗口
let OmniCpp_MayCompleteDot=1        " autocomplete with .
let OmniCpp_MayCompleteArrow=1      " autocomplete with ->
let OmniCpp_MayCompleteScope=1      " autocomplete with ::
let OmniCpp_SelectFirstItem=2       " select first item but not insert
let OmniCpp_NamespaceSearch=2       " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr=1   " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1     " enable the global scope search
let OmniCpp_DisplayMode=1           " Class scope completion mode: always show all members
let OmniCpp_ShowScopeInAbbr=1       " show scope in abbreviation and remove the last column
let OmniCpp_ShowAccess=1
let OmniCpp_DefaultNamespaces=["std"]


" ================ WinManager Setting ================ "
let g:winManagerWindowLayout='FileExplorer'      " 设置我们要管理的插件
let g:persistentBehaviour=1         " 如果所有编辑文件都关闭了，退出
let g:AutoOpenWinManager=1          " 自动打开<F12><F12><F12><F12>
let g:winManagerWidth=24            " 设置宽度
nmap wm :WMToggle<CR>


" ================ Taglist Setting ================ "
let Tlist_Show_One_File=0           " 让taglist可以同时展示多个文件的函数列表
let Tlist_Exit_OnlyWindow=1         " 当taglist是最后一个分割窗口时，自动退出
let Tlist_Process_File_Always=1     " 实时更新tags
let Tlist_File_Fold_Auto_Close=0    " 非当前文件，函数列表折叠隐藏
let Tlist_Use_Right_Window=1        " 让窗口显示在右边，0代表左边
let Tlist_Inc_Winwidth=24            " 
nmap <F12> :WMToggle<CR>:Tagbar<CR>


" ================ MiniBufferExplorer Setting ================  "
let g:miniBufExplMapWindowNavVim=1          " 按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapWindowNavArrows=1       " 按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口
let g:miniBufferplMapCTabSwitchBufs=1       " 启用以下两个功能：
                                            " Ctrl+Tab移动到下一个buffer并在当前窗口打开；
                                            " Ctrl+Shift+Tab移动到上一个buffer并在当前窗口打开。
let g:miniBufExplMapCTabSwitchWindows=1     " 启用以下两个功能：
                                            " Ctrl+Tab移到下一个窗口；
                                            " Ctrl+Shift+Tab移到上一个窗口
let g:miniBufExplModSelTarget=1             " 不再不可编辑内容的窗口中打开选中的buffer




" ================ QuickFix Setting ================ "
map <F6> :make clean<CR><CR><CR>                " 执行make clean
map <F5> :make<CR><CR><CR> :copen<CR><CR>       " 执行make编译程序，并打开quickfix窗口，显示编译信息
map <F7> :cp<CR>                " 光标移动到上一个错误所在行
map <F8> :cn<CR>                " 光标移动到下一个错误所在行
imap <F6> <ESC>:make clean<CR><CR><CR>
imap <F5> <ESC>:make<CR><CR><CR> :copen<CR><CR>
imap <F7> <ESC>:cp<CR>
imap <F8> <ESC>:cn<CR>


" ================ Cscope Setting ================ "
if has("cscope")
    set csprg=/usr/bin/cscope       " 指定用来执行cscope的命令
    set csto=0          " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
    set cst             " 同时搜索cscope数据库和标签文件
    set cscopequickfix=s-,c-,d-,i-,t-,e-        " 使用QuickFix窗口来显示cscope查找结果
    set nocsverb
    if filereadable("cscope.out")               " 若当前目录下存在cscope数据库，添加该数据库到vim
        cs add cscope.out
    elseif $CSCOPE_DB != ""        " 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
        cs add $CSCOPE_DB
    endif
    set csverb
endif
map <F9> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
imap <F9> <ESC>:cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
" 将:cs find c [name]等Cscope查找命令映射为<C-_>c等快捷键（按法是先按Ctrl+Shift+-,然后很快再按下c）
" 查找name符号（可以跳过注释）
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
" 查找name定义
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" 查找这个函数调用的函数
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
" 查找这个函数被调用的函数
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
" 查找这个字符串
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
" 查找这个egrep模式
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
" 查找这个文件
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" 查找包含这个文件的文件
nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR>


" ================ Vundle Plugins Manager ================ "
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'                 " 插件管理器
Plugin 'altercation/vim-colors-solarized'     " 配色方案：素雅
Plugin 'tomasr/molokai'                       " 配色方案：复古
Plugin 'vim-scripts/phd'                      " 配色方案：多彩
Plugin 'Lokaltog/vim-powerline'               " 状态栏
Plugin 'octol/vim-cpp-enhanced-highlight'     " C++语言高亮插件
Plugin 'nathanaelkane/vim-indent-guides'      " 缩进管理
Plugin 'derekwyatt/vim-protodef'              " 依赖于fs-witch，实现由头文件自动在源文件中生成实现框架代码
Plugin 'derekwyatt/vim-fswitch'               " 依赖项
Plugin 'kshenoy/vim-signature'
Plugin 'majutsushi/tagbar'                  " 用于显示函数、变量等窗口
Plugin 'vim-scripts/indexer.tar.gz'           " 周期性针对工程自动生成标签文件,依赖DfrankUtil
Plugin 'vim-scripts/DfrankUtil'               " 依赖项
Plugin 'vim-scripts/vimprj'
Plugin 'dyng/ctrlsf.vim'                      " 内容查找
Plugin 'terryma/vim-multiple-cursors'         " VIM多光标编辑功能
Plugin 'scrooloose/nerdcommenter'             " 快注释
Plugin 'vim-scripts/DrawIt'                   " ASCII art风格注释
Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'gcmt/wildfire.vim'
Plugin 'sjl/gundo.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'suan/vim-instant-markdown'
" Plugin 'lilydjwg/fcitx.vim'
call vundle#end()
filetype plugin indent on
syntax enable
syntax on           " 语法高亮配色方案
filetype on
filetype plugin on


""colorscheme molokai
colorscheme phd
"colorscheme solarized


set foldmethod=syntax       " 手动折叠
set foldlevel=100
set foldcolumn=5


let mapleader=";"
let g:disable_protodef_sorting=1        " 成员函数的实现顺序与声明顺序一致
let g:protodefprotogetter='~/.vim/bundle/protodef/pullproto/pl'       " 设置pullproto.pl脚本路径
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:molokai_original = 1
let g:Powerline_colorscheme = 'solarized256'        " 设置状态栏主题风格
let g:indent_guides_enable_on_vim_startup = 1       " 随vim自启动
let g:indent_guides_start_level = 2       " 从第二层开始可视化显示缩进
let g:indent_guides_guide_size = 1        " 色块宽度
let g:UltiSnipsSnippetDirectories=["mysnippets"]    " ultisnips模板所在路径
let g_indexer_ctagsCommandLineOptions="--c++kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"


nmap <silent><F10>sw :FSHere<CR>
nmap <leader>sp :CtrlSF<CR>               " 工程内全局查找光标所在关键字
nmap <leader>tn :tnext<CR>                " 正向遍历同名标签
nmap <leader>tp :tprevious<CR>            " 逆向遍历同名标签
nnoremap <leader>dcl :YcmCompleter GoToDeclaration<CR>       " 转到声明
nnoremap <leader>def :YcmCompleter GoToDefinition<CR>       " 转到定义




" 颜色设置:放在最后可以覆盖掉前面的默认设置
highlight String    ctermfg=3
highlight Function  ctermfg=12
highlight Operator  ctermfg=1   guifg=#c08040
highlight PmenuSel  ctermfg=4   ctermbg=11
highlight Pmenu     ctermfg=11  ctermbg=4
highlight Conditional ctermfg=11
highlight Type      ctermfg=11
highlight LineNr    ctermfg=255  ctermbg=210
highlight Comment   ctermfg=230
highlight Special   ctermfg=99
highlight Structure ctermfg=9
highlight Statement ctermfg=5
highlight Constant  ctermfg=1
highlight StorageClass ctermfg=81


" 自动补全  
:inoremap ( ()<ESC>i
:inoremap { {<CR><CR>}<ESC>kV<O<DEL>
:inoremap [ []<ESC>i
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i


" auto complete funtion comment
:inoremap /** /**<CR><TAB><TAB>Desc:<TAB> <CR><CR>@param <CR>@param <CR>@param <CR><CR>@return <CR><BS><BS>/<ESC>7k<END>i 


" auto complete file comment
:inoremap /*- /*<CR>-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-<CR><CR>    Filename : <CR><BS><BS> Description : <CR><CR>    Version : 1.0<CR>  CTime : <CR><BS><BS>Compiler : g++<CR>  Author : Gallen Escalade<CR>E-mail : 932441619@qq.com<CR><CR><BS>Revision : NONE<CR>   MTime : NONE<CR><BS><BS><BS><BS> Description : NONE<CR><CR><BS><BS> -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-<CR><BS><BS>*/<CR><CR><ESC>12k<END>:r !date<CR>i<BS><ESC>4k<END>:r !echo %<CR>i<BS><ESC>ji<END> 












